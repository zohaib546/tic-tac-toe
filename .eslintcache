[{"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\index.js":"1","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\App.js":"2","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\square\\Square.js":"3","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Square\\Square.js":"4","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Board\\Board.js":"5","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Scores\\Score.js":"6","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\utils\\checkWinner.js":"7","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\utils\\utility.js":"8","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Restart\\Restart.js":"9","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Game\\Game.js":"10"},{"size":142,"mtime":1616596383000,"results":"11","hashOfConfig":"12"},{"size":10347,"mtime":1637590530874,"results":"13","hashOfConfig":"12"},{"size":78,"mtime":1636202412978,"results":"14","hashOfConfig":"15"},{"size":1067,"mtime":1637240765173,"results":"16","hashOfConfig":"12"},{"size":569,"mtime":1637240103015,"results":"17","hashOfConfig":"12"},{"size":3849,"mtime":1637535159820,"results":"18","hashOfConfig":"12"},{"size":1249,"mtime":1636637391064,"results":"19","hashOfConfig":"12"},{"size":231,"mtime":1637160257681,"results":"20","hashOfConfig":"12"},{"size":388,"mtime":1637278157870,"results":"21","hashOfConfig":"12"},{"size":361,"mtime":1637240117391,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fbtb0t",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oabqbv",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\index.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\App.js",["44","45","46","47"],"import { useReducer, useState, useEffect } from \"react\";\nimport Game from \"./components/Game/Game\";\nimport { splitCoordinates, getRandom } from \"./utils/utility\";\nimport { checkWinner } from \"./utils/checkWinner\";\n\nconst scoreInit = {\n\tplayerVsComputer: {\n\t\tplayer: 0,\n\t\tcomputer: 0,\n\t\ttie: 0,\n\t},\n\tplayerVsPlayer: {\n\t\tplayer1: 0,\n\t\tplayer2: 0,\n\t\ttie: 0,\n\t},\n};\n\nconst gameBoardInit = [\n\t[\"\", \"\", \"\"],\n\t[\"\", \"\", \"\"],\n\t[\"\", \"\", \"\"],\n];\n\nconst animateBoardInit = [\n\t[\"0\", \"0\", \"0\"],\n\t[\"0\", \"0\", \"0\"],\n\t[\"0\", \"0\", \"0\"],\n];\n\nfunction scoreReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"MANAGE_PLAYERS_SCORE\": {\n\t\t\tconst { playerId } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (playerId === 1) {\n\t\t\t\tcloneScore.playerVsPlayer.player1 += 1;\n\t\t\t} else if (playerId === 2) {\n\t\t\t\tcloneScore.playerVsPlayer.player2 += 1;\n\t\t\t}\n\n\t\t\treturn cloneScore;\n\t\t}\n\t\tcase \"MANAGE_PLAYERS_TIE\": {\n\t\t\tconst { multiplaying } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (multiplaying) {\n\t\t\t\tcloneScore.playerVsPlayer.tie += 1;\n\t\t\t}\n\n\t\t\treturn cloneScore;\n\t\t}\n\n\t\tcase \"PLAYER_VS_COMPUTER_SCORE\": {\n\t\t\tconst { winner } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (winner === \"player\") cloneScore.playerVsComputer.player += 1;\n\n\t\t\tif (winner === \"computer\") cloneScore.playerVsComputer.computer += 1;\n\n\t\t\treturn cloneScore;\n\t\t}\n\t\tcase \"PLAYER_VS_COMPUTER_TIE\": {\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tcloneScore.playerVsComputer.tie += 1;\n\n\t\t\treturn cloneScore;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nfunction boardReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"MARK_MOVE_ON_BOARD\": {\n\t\t\tconst { row, col } = action.payload.offset;\n\t\t\tconst { mark } = action.payload;\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => stateCol));\n\t\t\tcloneBoard[row][col] = mark;\n\t\t\treturn [...cloneBoard];\n\t\t}\n\t\tcase \"CLEAR_BOARD\": {\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => \"\"));\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nfunction animateBoardReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"ANIMATE_WINNER\": {\n\t\t\tconst { posA, posB, posC } = action.payload.coordinates;\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => stateCol));\n\t\t\tconst posAx = splitCoordinates(posA, 0);\n\t\t\tconst posAy = splitCoordinates(posA, 1);\n\t\t\tconst posBx = splitCoordinates(posB, 0);\n\t\t\tconst posBy = splitCoordinates(posB, 1);\n\t\t\tconst posCx = splitCoordinates(posC, 0);\n\t\t\tconst posCy = splitCoordinates(posC, 1);\n\t\t\tcloneBoard[posAx][posAy] = \"1\";\n\t\t\tcloneBoard[posBx][posBy] = \"1\";\n\t\t\tcloneBoard[posCx][posCy] = \"1\";\n\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tcase \"ANIMATE_CLEAR\": {\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => \"0\"));\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nconst App = () => {\n\tconst [score, dispatchScore] = useReducer(scoreReducer, scoreInit);\n\tconst [board, dispatchBoard] = useReducer(boardReducer, gameBoardInit);\n\tconst [animateBoard, dispatchAnimateBoard] = useReducer(animateBoardReducer, animateBoardInit);\n\n\tconst [isComputerActive, setIsComputerActive] = useState(true);\n\tconst [multiplayer, setMultiplayer] = useState(false);\n\tconst [winner, setWinner] = useState(false);\n\tconst [tie, setTie] = useState(false);\n\tconst [turn, setTurn] = useState(\"\");\n\tconst [playerOnePlaying, setPlayerOnePlaying] = useState(false);\n\tconst [playerTwoPlaying, setPlayerTwoPlaying] = useState(false);\n\n\tuseEffect(() => {\n\t\tlet coordinates;\n\n\t\tif (!winner && !multiplayer && isComputerActive && turn === \"x\") {\n\t\t\tcoordinates = checkWinner(\"x\", board);\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_SCORE\", winner: \"player\" });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t} else if (!winner && !tie) {\n\t\t\t\tsetTurn(\"computer\");\n\t\t\t}\n\t\t} else if (!winner && !multiplayer && isComputerActive && turn === \"computer\") {\n\t\t\tcoordinates = checkWinner(\"o\", board);\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_SCORE\", winner: \"computer\" });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t\tsetTurn(\"computer\");\n\t\t\t}\n\t\t} else if (!winner && multiplayer && !isComputerActive && turn === \"x\") {\n\t\t\tcoordinates = checkWinner(\"x\", board);\n\t\t\tconsole.log(\"check winner for x\");\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_SCORE\", playerId: 1 });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t\tsetTurn(\"x\");\n\t\t\t}\n\t\t} else if (!winner && multiplayer && !isComputerActive && turn === \"o\") {\n\t\t\tcoordinates = checkWinner(\"o\", board);\n\t\t\tconsole.log(\"check winner for o\");\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_SCORE\", playerId: 2 });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t}\n\t\t}\n\t}, [winner, multiplayer, isComputerActive, turn, board]);\n\n\tuseEffect(() => {\n\t\tif (multiplayer && !isComputerActive) {\n\t\t\tcheckIsTie();\n\t\t}\n\t}, [turn]);\n\n\tuseEffect(() => {\n\t\tfunction handleComputerTurn() {\n\t\t\tif (turn === \"computer\" && !multiplayer && isComputerActive) {\n\t\t\t\tconst offsetX = getRandom(0, 2);\n\t\t\t\tconst offsetY = getRandom(0, 2);\n\n\t\t\t\tif (!board[offsetX][offsetY]) {\n\t\t\t\t\tdispatchBoard({\n\t\t\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\t\t\tpayload: { offset: { row: offsetX, col: offsetY }, mark: \"o\" },\n\t\t\t\t\t});\n\n\t\t\t\t\tsetTurn(\"\");\n\t\t\t\t} else if (!checkIsTie()) {\n\t\t\t\t\thandleComputerTurn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst clearTimer = setTimeout(() => {\n\t\t\tif (!winner && !tie) {\n\t\t\t\thandleComputerTurn();\n\t\t\t}\n\t\t}, 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(clearTimer);\n\t\t};\n\t}, [turn, isComputerActive, multiplayer, winner]);\n\n\tuseEffect(() => {\n\t\tif (tie && !multiplayer && isComputerActive) {\n\t\t\tsetTurn(\"\");\n\t\t}\n\t}, [tie, multiplayer, isComputerActive]);\n\n\tuseEffect(() => {\n\t\tif (playerOnePlaying && !playerTwoPlaying) {\n\t\t\tsetTurn(\"x\");\n\t\t}\n\t\tif (!playerOnePlaying && playerTwoPlaying) {\n\t\t\tsetTurn(\"o\");\n\t\t}\n\n\t\tif (winner && multiplayer) {\n\t\t\tsetTurn(\"x\");\n\t\t}\n\t});\n\n\tuseEffect(() => {\n\t\tif (multiplayer && !isComputerActive) {\n\t\t\tsetTurn(\"x\");\n\t\t} else if (!multiplayer && isComputerActive) {\n\t\t\tsetTurn(\"\");\n\t\t}\n\t}, [multiplayer, isComputerActive]);\n\n\tconst checkIsTie = () => {\n\t\tif (!tie) {\n\t\t\tlet occupied = 0;\n\t\t\tboard.forEach((row) =>\n\t\t\t\trow.forEach((col) => {\n\t\t\t\t\tif (col) {\n\t\t\t\t\t\toccupied++;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (occupied === 9 && !winner) {\n\t\t\t\tsetTie(true);\n\n\t\t\t\tif (!multiplayer && isComputerActive) {\n\t\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_TIE\" });\n\t\t\t\t}\n\n\t\t\t\tif (multiplayer && !isComputerActive) {\n\t\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_TIE\", multiplaying: true });\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst handleComputerActive = () => {\n\t\tsetIsComputerActive((state) => !state);\n\t};\n\n\tconst handleTurn = (turn) => {\n\t\tsetTurn(turn);\n\t};\n\n\tconst handleMultiplayer = () => {\n\t\tsetMultiplayer((state) => !state);\n\t};\n\n\tconst handleRestart = () => {\n\t\tif (!multiplayer && isComputerActive) {\n\t\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\t\tsetTurn(\"\");\n\t\t\tsetIsComputerActive(true);\n\t\t\tsetMultiplayer(false);\n\t\t\twinner && setWinner(false);\n\t\t\ttie && setTie(false);\n\t\t} else {\n\t\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\t\tsetTurn(\"x\");\n\t\t\tsetIsComputerActive(false);\n\t\t\tsetMultiplayer(true);\n\t\t\tsetPlayerOnePlaying(false);\n\t\t\tsetPlayerTwoPlaying(false);\n\t\t\twinner && setWinner(false);\n\t\t\ttie && setTie(false);\n\t\t}\n\t};\n\n\tconst handleMultiplaying = () => {\n\t\thandleMultiplayer();\n\t\thandleComputerActive();\n\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\tsetPlayerOnePlaying(false);\n\t\tsetPlayerTwoPlaying(false);\n\t\twinner && setWinner(false);\n\t\ttie && setTie(false);\n\t};\n\n\tconsole.log(\"multiplayer\", multiplayer);\n\tconsole.log(\"computerActive\", isComputerActive);\n\tconsole.log(\"turn\", turn);\n\tconsole.log(\"winner\", winner);\n\tconsole.log(\"tie\", tie);\n\tconsole.log(\"playerOnePlaying\", playerOnePlaying);\n\tconsole.log(\"playerTwoPlaying\", playerTwoPlaying);\n\n\tconst handleMove = ({ rowId, colId }) => {\n\t\tif (turn === \"\") {\n\t\t\tsetTurn(\"x\");\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"x\" },\n\t\t\t});\n\t\t} else if (turn === \"x\" && multiplayer && !isComputerActive) {\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"x\" },\n\t\t\t});\n\t\t\tsetPlayerOnePlaying(false);\n\t\t\tsetPlayerTwoPlaying(true);\n\t\t} else if (turn === \"o\" && multiplayer && !isComputerActive) {\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"o\" },\n\t\t\t});\n\t\t\tsetPlayerOnePlaying(true);\n\t\t\tsetPlayerTwoPlaying(false);\n\t\t}\n\t};\n\n\tconst boardProps = {\n\t\tscore: {\n\t\t\tgameScore: score,\n\t\t\thandleGameScore: dispatchScore,\n\t\t},\n\t\tcomputerPlaying: {\n\t\t\tisComputerPlaying: isComputerActive,\n\t\t\thandleComputerPlaying: handleComputerActive,\n\t\t},\n\t\tmultiplaying: {\n\t\t\tisMultiplaying: multiplayer,\n\t\t\thandleMultiplaying: handleMultiplayer,\n\t\t\tdoMultiplaying: handleMultiplaying,\n\t\t},\n\t\tboard: {\n\t\t\tgameBoard: board,\n\t\t\thandleGameBoard: dispatchBoard,\n\t\t},\n\t\tanimateGameBoard: {\n\t\t\tanimateBoard,\n\t\t\thandleAnimateBoard: dispatchAnimateBoard,\n\t\t},\n\t\twinner: {\n\t\t\tisWinner: winner,\n\t\t\thandleWinner: setWinner,\n\t\t},\n\t\ttie: {\n\t\t\tisTie: tie,\n\t\t\thandleTie: setTie,\n\t\t\tcheckIsTie,\n\t\t},\n\t\tturn: {\n\t\t\tactiveTurn: turn,\n\t\t\thandleActiveTurn: handleTurn,\n\t\t},\n\t\trestart: handleRestart,\n\t\tonMove: handleMove,\n\t};\n\n\treturn <Game {...boardProps} />;\n};\n\nexport default App;\n","C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\square\\Square.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Square\\Square.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Board\\Board.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Scores\\Score.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\utils\\checkWinner.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\utils\\utility.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Restart\\Restart.js",[],"C:\\Users\\ZOHAI\\Desktop\\react\\tic-tac-toe\\src\\components\\Game\\Game.js",[],{"ruleId":"48","severity":1,"message":"49","line":197,"column":5,"nodeType":"50","endLine":197,"endColumn":57,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":203,"column":5,"nodeType":"50","endLine":203,"endColumn":11,"suggestions":"53"},{"ruleId":"48","severity":1,"message":"54","line":233,"column":5,"nodeType":"50","endLine":233,"endColumn":50,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":241,"column":2,"nodeType":"57","endLine":241,"endColumn":11,"suggestions":"58"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tie'. Either include it or remove the dependency array.","ArrayExpression",["59"],"React Hook useEffect has missing dependencies: 'checkIsTie', 'isComputerActive', and 'multiplayer'. Either include them or remove the dependency array.",["60"],"React Hook useEffect has missing dependencies: 'board', 'checkIsTie', and 'tie'. Either include them or remove the dependency array.",["61"],"React Hook useEffect contains a call to 'setTurn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [playerOnePlaying, playerTwoPlaying, winner, multiplayer] as a second argument to the useEffect Hook.","Identifier",["62"],{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},"Update the dependencies array to be: [winner, multiplayer, isComputerActive, turn, board, tie]",{"range":"71","text":"72"},"Update the dependencies array to be: [checkIsTie, isComputerActive, multiplayer, turn]",{"range":"73","text":"74"},"Update the dependencies array to be: [turn, isComputerActive, multiplayer, winner, board, checkIsTie, tie]",{"range":"75","text":"76"},"Add dependencies array: [playerOnePlaying, playerTwoPlaying, winner, multiplayer]",{"range":"77","text":"78"},[5563,5615],"[winner, multiplayer, isComputerActive, turn, board, tie]",[5705,5711],"[checkIsTie, isComputerActive, multiplayer, turn]",[6337,6382],"[turn, isComputerActive, multiplayer, winner, board, checkIsTie, tie]",[6728,6728],", [playerOnePlaying, playerTwoPlaying, winner, multiplayer]"]