{"version":3,"sources":["components/Scores/Score.module.css","components/Square/Square.module.css","components/Restart/Restart.module.css","components/Board/Board.module.css","components/Game/Game.module.css","components/Square/Square.js","components/Board/Board.js","components/Scores/Score.js","components/Restart/Restart.js","components/Game/Game.js","utils/utility.js","utils/checkWinner.js","App.js","index.js"],"names":["module","exports","Square","props","offset","value","animateGameBoard","winner","tie","onMove","className","animateBoard","rowId","colId","isWinner","styles","square","disabled","over","isTie","onClick","Board","board","boardContainer","gameBoard","map","row","col","generateKey","Score","score","computerPlaying","multiplaying","turn","gameScore","playerVsPlayer","playerOneScore","player1","playerTwoScore","player2","playerVsPlayerTie","playerVsComputer","playerVsComputerScore","player","computerScore","computer","playerVsComputerTie","playerContent","isMultiplaying","multiPlayerContent","scorePanel","activeTurn","doMultiplaying","scoreBox","title","titleSign","isComputerPlaying","playerPanel","playerIcon","xmlns","viewBox","fill","d","playerText","Restart","restart","show","hide","Game","gameContainer","splitCoordinates","str","pos","split","getRandom","min","max","Math","ceil","floor","random","checkWinner","mark","posA","posB","posC","scoreInit","gameBoardInit","animateBoardInit","scoreReducer","prevState","action","type","playerId","cloneScore","Error","boardReducer","payload","cloneBoard","stateRow","stateCol","animateBoardReducer","coordinates","posAx","posAy","posBx","posBy","posCx","posCy","App","useReducer","dispatchScore","dispatchBoard","dispatchAnimateBoard","useState","isComputerActive","setIsComputerActive","multiplayer","setMultiplayer","setWinner","setTie","setTurn","playerOnePlaying","setPlayerOnePlaying","playerTwoPlaying","setPlayerTwoPlaying","useEffect","console","log","checkIsTie","handleComputerTurn","offsetX","offsetY","clearTimer","setTimeout","clearTimeout","occupied","forEach","handleComputerActive","state","handleMultiplayer","boardProps","handleGameScore","handleComputerPlaying","handleMultiplaying","handleGameBoard","handleAnimateBoard","handleWinner","handleTie","handleActiveTurn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29cd17ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorePanel\":\"Score_scorePanel__36YOx\",\"playerPanel\":\"Score_playerPanel__21cxg\",\"title\":\"Score_title__1jEmR\",\"titleSign\":\"Score_titleSign__2hrtN\",\"score\":\"Score_score__1ttHK\",\"scoreBox\":\"Score_scoreBox__cXOht\",\"player1\":\"Score_player1__1ZAzO\",\"player2\":\"Score_player2__1eq1W\",\"playerIcon\":\"Score_playerIcon__1InOh\",\"playerText\":\"Score_playerText__3Mq_i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__2fJnZ\",\"disabled\":\"Square_disabled__1Lc1f\",\"over\":\"Square_over__1SsHn\",\"tie\":\"Square_tie__2PO-a\",\"border-blink\":\"Square_border-blink__1HGHq\",\"winner\":\"Square_winner__2-jrI\",\"blink\":\"Square_blink__3B3o4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restart\":\"Restart_restart__3tAwQ\",\"hide\":\"Restart_hide__hu02z\",\"show\":\"Restart_show__3V_kh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__ujF2G\",\"boardContainer\":\"Board_boardContainer__2wXnk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameContainer\":\"Game_gameContainer__2CIiI\"};","import styles from \"./Square.module.css\";\r\n\r\nconst Square = (props) => {\r\n\tconst { offset, value, animateGameBoard, winner, tie, onMove } = props;\r\n\r\n\tconst renderClasses = () => {\r\n\t\tif (\r\n\t\t\tanimateGameBoard.animateBoard[offset.rowId][offset.colId] === \"1\" &&\r\n\t\t\twinner.isWinner &&\r\n\t\t\tvalue\r\n\t\t) {\r\n\t\t\treturn `${styles.square} ${styles.disabled} ${styles.winner}`;\r\n\t\t}\r\n\r\n\t\tif (animateGameBoard.animateBoard[offset.rowId][offset.colId] === \"0\" && winner.isWinner) {\r\n\t\t\treturn `${styles.square} ${styles.disabled} ${styles.over}`;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tanimateGameBoard.animateBoard[offset.rowId][offset.colId] === \"0\" &&\r\n\t\t\t!winner.isWinner &&\r\n\t\t\ttie.isTie\r\n\t\t) {\r\n\t\t\treturn `${styles.square} ${styles.disabled} ${styles.over} ${styles.tie}`;\r\n\t\t}\r\n\r\n\t\tif (!winner.isWinner && value) {\r\n\t\t\treturn `${styles.square} ${styles.disabled}`;\r\n\t\t}\r\n\r\n\t\treturn `${styles.square}`;\r\n\t};\r\n\r\n\tconst handleMove = () => {\r\n\t\tonMove(offset);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={renderClasses()} onClick={handleMove}>\r\n\t\t\t{value}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Square;\r\n","import Square from \"../Square/Square\";\r\nimport styles from \"./Board.module.css\";\r\n\r\nconst Board = (props) => {\r\n\tconst { board } = props;\r\n\r\n\tconst generateKey = (row, col) => `${row}_${col}`;\r\n\r\n\treturn (\r\n\t\t<div className={styles.board}>\r\n\t\t\t<div className={styles.boardContainer}>\r\n\t\t\t\t{board.gameBoard.map((row, rowId) =>\r\n\t\t\t\t\trow.map((col, colId) => (\r\n\t\t\t\t\t\t<Square\r\n\t\t\t\t\t\t\tkey={generateKey(rowId, colId)}\r\n\t\t\t\t\t\t\toffset={{ rowId, colId }}\r\n\t\t\t\t\t\t\tvalue={col}\r\n\t\t\t\t\t\t\t{...props}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n","import styles from \"./Score.module.css\";\r\n\r\nconst Score = (props) => {\r\n\tconst { score, computerPlaying, multiplaying, turn, tie, winner } = props;\r\n\r\n\tconst {\r\n\t\tplayer1: playerOneScore,\r\n\t\tplayer2: playerTwoScore,\r\n\t\ttie: playerVsPlayerTie,\r\n\t} = score.gameScore.playerVsPlayer;\r\n\r\n\tconst {\r\n\t\tplayer: playerVsComputerScore,\r\n\t\tcomputer: computerScore,\r\n\t\ttie: playerVsComputerTie,\r\n\t} = score.gameScore.playerVsComputer;\r\n\r\n\tconst playerContent = multiplaying.isMultiplaying ? \"2p\" : \"1p\";\r\n\tconst multiPlayerContent = multiplaying.isMultiplaying ? \"player 2\" : \"computer\";\r\n\r\n\tconst renderClasses = () => {\r\n\t\tif (winner.isWinner || tie.isTie) {\r\n\t\t\treturn styles.scorePanel;\r\n\t\t}\r\n\r\n\t\tif (multiplaying.isMultiplaying && turn.activeTurn === \"x\") {\r\n\t\t\treturn `${styles.scorePanel} ${styles.player1}`;\r\n\t\t}\r\n\r\n\t\tif (multiplaying.isMultiplaying && turn.activeTurn === \"o\") {\r\n\t\t\treturn `${styles.scorePanel} ${styles.player2}`;\r\n\t\t}\r\n\r\n\t\treturn styles.scorePanel;\r\n\t};\r\n\r\n\tconst handleMultiplaying = () => {\r\n\t\tmultiplaying.doMultiplaying();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={renderClasses()} onClick={handleMultiplaying}>\r\n\t\t\t<div className={styles.scoreBox}>\r\n\t\t\t\t<p className={styles.title}>\r\n\t\t\t\t\tPlayer 1 (<span className={styles.titleSign}>x</span>)\r\n\t\t\t\t</p>\r\n\t\t\t\t{multiplaying.isMultiplaying && <span className={styles.score}>{playerOneScore}</span>}\r\n\t\t\t\t{computerPlaying.isComputerPlaying && (\r\n\t\t\t\t\t<span className={styles.score}>{playerVsComputerScore}</span>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.scoreBox}>\r\n\t\t\t\t<p className={styles.title}>Tie</p>\r\n\t\t\t\t{multiplaying.isMultiplaying && <span className={styles.score}>{playerVsPlayerTie}</span>}\r\n\t\t\t\t{computerPlaying.isComputerPlaying && (\r\n\t\t\t\t\t<span className={styles.score}>{playerVsComputerTie}</span>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.scoreBox}>\r\n\t\t\t\t<p className={styles.title}>\r\n\t\t\t\t\t{multiPlayerContent} (<span className={styles.titleSign}>o</span>)\r\n\t\t\t\t</p>\r\n\t\t\t\t{multiplaying.isMultiplaying && <span className={styles.score}>{playerTwoScore}</span>}\r\n\t\t\t\t{computerPlaying.isComputerPlaying && <span className={styles.score}>{computerScore}</span>}\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.playerPanel}>\r\n\t\t\t\t<svg className={styles.playerIcon} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\r\n\t\t\t\t\t<g fill=\"#fff\">\r\n\t\t\t\t\t\t{!multiplaying.isMultiplaying && (\r\n\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\tclassName=\"person1\"\r\n\t\t\t\t\t\t\t\td=\"M49.947,90.991c0.693,0,1.41,0.02,2.104,0c13.547-0.201,26.439-1.723,28.775-3.945 c0.537-4.928,1.195-7.311-20.65-17.644c-3.107-1.742-1.465-8.492-1.465-8.492c6.578-4.969,11.096-16.463,11.096-25.676 c0-15.921-7.18-23.453-17.756-24.234h-2.104c-10.557,0.781-17.734,8.312-17.734,24.234c0,9.213,4.496,20.707,11.078,25.676 c0,0,1.641,6.75-1.449,8.492C19.979,79.735,20.635,82.118,21.176,87.046C23.51,89.269,36.402,90.79,49.947,90.991z\"\r\n\t\t\t\t\t\t\t></path>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{multiplaying.isMultiplaying && (\r\n\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\tclassName=\"person2\"\r\n\t\t\t\t\t\t\t\td=\"M66.219,85h1.562c9.92-0.14,19.38-1.2,21.08-2.779c0.422-3.44,0.9-5.101-15.142-12.341 c-2.279-1.22-1.059-5.939-1.059-5.939c4.822-3.48,8.123-11.521,8.123-17.98c0-11.14-5.263-16.419-13.001-16.959h-1.562 c-7.738,0.54-13,5.799-13,16.959c0,6.46,3.301,14.5,8.121,17.98c0,0,1.221,4.719-1.059,5.939c-16.041,7.24-15.562,8.9-15.14,12.341 C46.84,83.8,56.301,84.86,66.219,85z M30.217,69h1.564c9.918-0.14,19.378-1.2,21.078-2.779c0.422-3.44,0.9-5.1-15.14-12.34 c-2.279-1.22-1.059-5.939-1.059-5.939c4.82-3.48,8.121-11.521,8.121-17.98c0-11.14-5.262-16.42-13-16.96h-1.564 c-7.738,0.54-13,5.8-13,16.96c0,6.459,3.301,14.5,8.121,17.98c0,0,1.221,4.72-1.059,5.939c-16.041,7.24-15.562,8.9-15.14,12.34 C10.839,67.8,20.299,68.86,30.217,69z\"\r\n\t\t\t\t\t\t\t></path>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</g>\r\n\t\t\t\t</svg>\r\n\t\t\t\t<span className={styles.playerText}>{playerContent}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Score;\r\n","import styles from \"./Restart.module.css\";\r\n\r\nconst Restart = (props) => {\r\n\tconst { winner, tie, restart } = props;\r\n\r\n\tconst classesForRestart = () => {\r\n\t\treturn winner.isWinner || tie.isTie\r\n\t\t\t? `${styles.restart} ${styles.show}`\r\n\t\t\t: `${styles.restart} ${styles.hide}`;\r\n\t};\r\n\r\n\treturn <div className={classesForRestart()} onClick={restart}></div>;\r\n};\r\n\r\nexport default Restart;\r\n","import Board from \"../Board/Board\";\r\nimport Score from \"../Scores/Score\";\r\nimport Restart from \"../Restart/Restart\";\r\nimport styles from \"./Game.module.css\";\r\n\r\nconst Game = (props) => {\r\n\treturn (\r\n\t\t<div className={styles.gameContainer}>\r\n\t\t\t<Board {...props} />\r\n\t\t\t<Score {...props} />\r\n\t\t\t<Restart {...props} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Game;\r\n","export function splitCoordinates(str, pos) {\r\n\treturn str.split(\"\")[pos];\r\n}\r\n\r\nexport function getRandom(min, max) {\r\n\tmin = Math.ceil(min);\r\n\tmax = Math.floor(max);\r\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function checkWinner(mark, board) {\r\n\tif (mark === board[0][0] && mark === board[0][1] && mark === board[0][2]) {\r\n\t\treturn {\r\n\t\t\tposA: \"00\",\r\n\t\t\tposB: \"01\",\r\n\t\t\tposC: \"02\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[1][0] && mark === board[1][1] && mark === board[1][2]) {\r\n\t\treturn {\r\n\t\t\tposA: \"10\",\r\n\t\t\tposB: \"11\",\r\n\t\t\tposC: \"12\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[2][0] && mark === board[2][1] && mark === board[2][2]) {\r\n\t\treturn {\r\n\t\t\tposA: \"20\",\r\n\t\t\tposB: \"21\",\r\n\t\t\tposC: \"22\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[0][0] && mark === board[1][0] && mark === board[2][0]) {\r\n\t\treturn {\r\n\t\t\tposA: \"00\",\r\n\t\t\tposB: \"10\",\r\n\t\t\tposC: \"20\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[0][1] && mark === board[1][1] && mark === board[2][1]) {\r\n\t\treturn {\r\n\t\t\tposA: \"01\",\r\n\t\t\tposB: \"11\",\r\n\t\t\tposC: \"21\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[0][2] && mark === board[1][2] && mark === board[2][2]) {\r\n\t\treturn {\r\n\t\t\tposA: \"02\",\r\n\t\t\tposB: \"12\",\r\n\t\t\tposC: \"22\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[0][0] && mark === board[1][1] && mark === board[2][2]) {\r\n\t\treturn {\r\n\t\t\tposA: \"00\",\r\n\t\t\tposB: \"11\",\r\n\t\t\tposC: \"22\",\r\n\t\t};\r\n\t}\r\n\tif (mark === board[0][2] && mark === board[1][1] && mark === board[2][0]) {\r\n\t\treturn {\r\n\t\t\tposA: \"02\",\r\n\t\t\tposB: \"11\",\r\n\t\t\tposC: \"20\",\r\n\t\t};\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n","import { useReducer, useState, useEffect } from \"react\";\nimport Game from \"./components/Game/Game\";\nimport { splitCoordinates, getRandom } from \"./utils/utility\";\nimport { checkWinner } from \"./utils/checkWinner\";\n\nconst scoreInit = {\n\tplayerVsComputer: {\n\t\tplayer: 0,\n\t\tcomputer: 0,\n\t\ttie: 0,\n\t},\n\tplayerVsPlayer: {\n\t\tplayer1: 0,\n\t\tplayer2: 0,\n\t\ttie: 0,\n\t},\n};\n\nconst gameBoardInit = [\n\t[\"\", \"\", \"\"],\n\t[\"\", \"\", \"\"],\n\t[\"\", \"\", \"\"],\n];\n\nconst animateBoardInit = [\n\t[\"0\", \"0\", \"0\"],\n\t[\"0\", \"0\", \"0\"],\n\t[\"0\", \"0\", \"0\"],\n];\n\nfunction scoreReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"MANAGE_PLAYERS_SCORE\": {\n\t\t\tconst { playerId } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (playerId === 1) {\n\t\t\t\tcloneScore.playerVsPlayer.player1 += 1;\n\t\t\t} else if (playerId === 2) {\n\t\t\t\tcloneScore.playerVsPlayer.player2 += 1;\n\t\t\t}\n\n\t\t\treturn cloneScore;\n\t\t}\n\t\tcase \"MANAGE_PLAYERS_TIE\": {\n\t\t\tconst { multiplaying } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (multiplaying) {\n\t\t\t\tcloneScore.playerVsPlayer.tie += 1;\n\t\t\t}\n\n\t\t\treturn cloneScore;\n\t\t}\n\n\t\tcase \"PLAYER_VS_COMPUTER_SCORE\": {\n\t\t\tconst { winner } = action;\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tif (winner === \"player\") cloneScore.playerVsComputer.player += 1;\n\n\t\t\tif (winner === \"computer\") cloneScore.playerVsComputer.computer += 1;\n\n\t\t\treturn cloneScore;\n\t\t}\n\t\tcase \"PLAYER_VS_COMPUTER_TIE\": {\n\t\t\tconst cloneScore = {\n\t\t\t\t...prevState,\n\t\t\t\tplayerVsComputer: { ...prevState.playerVsComputer },\n\t\t\t\tplayerVsPlayer: { ...prevState.playerVsPlayer },\n\t\t\t};\n\n\t\t\tcloneScore.playerVsComputer.tie += 1;\n\n\t\t\treturn cloneScore;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nfunction boardReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"MARK_MOVE_ON_BOARD\": {\n\t\t\tconst { row, col } = action.payload.offset;\n\t\t\tconst { mark } = action.payload;\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => stateCol));\n\t\t\tcloneBoard[row][col] = mark;\n\t\t\treturn [...cloneBoard];\n\t\t}\n\t\tcase \"CLEAR_BOARD\": {\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => \"\"));\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nfunction animateBoardReducer(prevState, action) {\n\tswitch (action.type) {\n\t\tcase \"ANIMATE_WINNER\": {\n\t\t\tconst { posA, posB, posC } = action.payload.coordinates;\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => stateCol));\n\t\t\tconst posAx = splitCoordinates(posA, 0);\n\t\t\tconst posAy = splitCoordinates(posA, 1);\n\t\t\tconst posBx = splitCoordinates(posB, 0);\n\t\t\tconst posBy = splitCoordinates(posB, 1);\n\t\t\tconst posCx = splitCoordinates(posC, 0);\n\t\t\tconst posCy = splitCoordinates(posC, 1);\n\t\t\tcloneBoard[posAx][posAy] = \"1\";\n\t\t\tcloneBoard[posBx][posBy] = \"1\";\n\t\t\tcloneBoard[posCx][posCy] = \"1\";\n\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tcase \"ANIMATE_CLEAR\": {\n\t\t\tconst cloneBoard = prevState.map((stateRow) => stateRow.map((stateCol) => \"0\"));\n\t\t\treturn cloneBoard;\n\t\t}\n\n\t\tdefault:\n\t\t\tthrow new Error(\"This action is unrecognized!\");\n\t}\n}\n\nconst App = () => {\n\tconst [score, dispatchScore] = useReducer(scoreReducer, scoreInit);\n\tconst [board, dispatchBoard] = useReducer(boardReducer, gameBoardInit);\n\tconst [animateBoard, dispatchAnimateBoard] = useReducer(animateBoardReducer, animateBoardInit);\n\n\tconst [isComputerActive, setIsComputerActive] = useState(true);\n\tconst [multiplayer, setMultiplayer] = useState(false);\n\tconst [winner, setWinner] = useState(false);\n\tconst [tie, setTie] = useState(false);\n\tconst [turn, setTurn] = useState(\"\");\n\tconst [playerOnePlaying, setPlayerOnePlaying] = useState(false);\n\tconst [playerTwoPlaying, setPlayerTwoPlaying] = useState(false);\n\n\tuseEffect(() => {\n\t\tlet coordinates;\n\n\t\tif (!winner && !multiplayer && isComputerActive && turn === \"x\") {\n\t\t\tcoordinates = checkWinner(\"x\", board);\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_SCORE\", winner: \"player\" });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t} else if (!winner && !tie) {\n\t\t\t\tsetTurn(\"computer\");\n\t\t\t}\n\t\t} else if (!winner && !multiplayer && isComputerActive && turn === \"computer\") {\n\t\t\tcoordinates = checkWinner(\"o\", board);\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_SCORE\", winner: \"computer\" });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t\tsetTurn(\"computer\");\n\t\t\t}\n\t\t} else if (!winner && multiplayer && !isComputerActive && turn === \"x\") {\n\t\t\tcoordinates = checkWinner(\"x\", board);\n\t\t\tconsole.log(\"check winner for x\");\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_SCORE\", playerId: 1 });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t\tsetTurn(\"x\");\n\t\t\t}\n\t\t} else if (!winner && multiplayer && !isComputerActive && turn === \"o\") {\n\t\t\tcoordinates = checkWinner(\"o\", board);\n\t\t\tconsole.log(\"check winner for o\");\n\n\t\t\tif (coordinates) {\n\t\t\t\tsetWinner(true);\n\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_SCORE\", playerId: 2 });\n\t\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_WINNER\", payload: { coordinates } });\n\t\t\t}\n\t\t}\n\t}, [winner, multiplayer, isComputerActive, turn, board]);\n\n\tuseEffect(() => {\n\t\tif (multiplayer && !isComputerActive) {\n\t\t\tcheckIsTie();\n\t\t}\n\t}, [turn]);\n\n\tuseEffect(() => {\n\t\tfunction handleComputerTurn() {\n\t\t\tif (turn === \"computer\" && !multiplayer && isComputerActive) {\n\t\t\t\tconst offsetX = getRandom(0, 2);\n\t\t\t\tconst offsetY = getRandom(0, 2);\n\n\t\t\t\tif (!board[offsetX][offsetY]) {\n\t\t\t\t\tdispatchBoard({\n\t\t\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\t\t\tpayload: { offset: { row: offsetX, col: offsetY }, mark: \"o\" },\n\t\t\t\t\t});\n\n\t\t\t\t\tsetTurn(\"\");\n\t\t\t\t} else if (!checkIsTie()) {\n\t\t\t\t\thandleComputerTurn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst clearTimer = setTimeout(() => {\n\t\t\tif (!winner && !tie) {\n\t\t\t\thandleComputerTurn();\n\t\t\t}\n\t\t}, 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(clearTimer);\n\t\t};\n\t}, [turn, isComputerActive, multiplayer, winner]);\n\n\tuseEffect(() => {\n\t\tif (tie && !multiplayer && isComputerActive) {\n\t\t\tsetTurn(\"\");\n\t\t}\n\t}, [tie, multiplayer, isComputerActive]);\n\n\tuseEffect(() => {\n\t\tif (playerOnePlaying && !playerTwoPlaying) {\n\t\t\tsetTurn(\"x\");\n\t\t}\n\t\tif (!playerOnePlaying && playerTwoPlaying) {\n\t\t\tsetTurn(\"o\");\n\t\t}\n\n\t\tif (winner && multiplayer) {\n\t\t\tsetTurn(\"x\");\n\t\t}\n\t});\n\n\tuseEffect(() => {\n\t\tif (multiplayer && !isComputerActive) {\n\t\t\tsetTurn(\"x\");\n\t\t} else if (!multiplayer && isComputerActive) {\n\t\t\tsetTurn(\"\");\n\t\t}\n\t}, [multiplayer, isComputerActive]);\n\n\tconst checkIsTie = () => {\n\t\tif (!tie) {\n\t\t\tlet occupied = 0;\n\t\t\tboard.forEach((row) =>\n\t\t\t\trow.forEach((col) => {\n\t\t\t\t\tif (col) {\n\t\t\t\t\t\toccupied++;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (occupied === 9 && !winner) {\n\t\t\t\tsetTie(true);\n\n\t\t\t\tif (!multiplayer && isComputerActive) {\n\t\t\t\t\tdispatchScore({ type: \"PLAYER_VS_COMPUTER_TIE\" });\n\t\t\t\t}\n\n\t\t\t\tif (multiplayer && !isComputerActive) {\n\t\t\t\t\tdispatchScore({ type: \"MANAGE_PLAYERS_TIE\", multiplaying: true });\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst handleComputerActive = () => {\n\t\tsetIsComputerActive((state) => !state);\n\t};\n\n\tconst handleTurn = (turn) => {\n\t\tsetTurn(turn);\n\t};\n\n\tconst handleMultiplayer = () => {\n\t\tsetMultiplayer((state) => !state);\n\t};\n\n\tconst handleRestart = () => {\n\t\tif (!multiplayer && isComputerActive) {\n\t\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\t\tsetTurn(\"\");\n\t\t\tsetIsComputerActive(true);\n\t\t\tsetMultiplayer(false);\n\t\t\twinner && setWinner(false);\n\t\t\ttie && setTie(false);\n\t\t} else {\n\t\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\t\tsetTurn(\"x\");\n\t\t\tsetIsComputerActive(false);\n\t\t\tsetMultiplayer(true);\n\t\t\tsetPlayerOnePlaying(false);\n\t\t\tsetPlayerTwoPlaying(false);\n\t\t\twinner && setWinner(false);\n\t\t\ttie && setTie(false);\n\t\t}\n\t};\n\n\tconst handleMultiplaying = () => {\n\t\thandleMultiplayer();\n\t\thandleComputerActive();\n\t\tdispatchBoard({ type: \"CLEAR_BOARD\" });\n\t\tdispatchAnimateBoard({ type: \"ANIMATE_CLEAR\" });\n\t\tsetPlayerOnePlaying(false);\n\t\tsetPlayerTwoPlaying(false);\n\t\twinner && setWinner(false);\n\t\ttie && setTie(false);\n\t};\n\n\tconsole.log(\"multiplayer\", multiplayer);\n\tconsole.log(\"computerActive\", isComputerActive);\n\tconsole.log(\"turn\", turn);\n\tconsole.log(\"winner\", winner);\n\tconsole.log(\"tie\", tie);\n\tconsole.log(\"playerOnePlaying\", playerOnePlaying);\n\tconsole.log(\"playerTwoPlaying\", playerTwoPlaying);\n\n\tconst handleMove = ({ rowId, colId }) => {\n\t\tif (turn === \"\") {\n\t\t\tsetTurn(\"x\");\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"x\" },\n\t\t\t});\n\t\t} else if (turn === \"x\" && multiplayer && !isComputerActive) {\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"x\" },\n\t\t\t});\n\t\t\tsetPlayerOnePlaying(false);\n\t\t\tsetPlayerTwoPlaying(true);\n\t\t} else if (turn === \"o\" && multiplayer && !isComputerActive) {\n\t\t\tdispatchBoard({\n\t\t\t\ttype: \"MARK_MOVE_ON_BOARD\",\n\t\t\t\tpayload: { offset: { row: rowId, col: colId }, mark: \"o\" },\n\t\t\t});\n\t\t\tsetPlayerOnePlaying(true);\n\t\t\tsetPlayerTwoPlaying(false);\n\t\t}\n\t};\n\n\tconst boardProps = {\n\t\tscore: {\n\t\t\tgameScore: score,\n\t\t\thandleGameScore: dispatchScore,\n\t\t},\n\t\tcomputerPlaying: {\n\t\t\tisComputerPlaying: isComputerActive,\n\t\t\thandleComputerPlaying: handleComputerActive,\n\t\t},\n\t\tmultiplaying: {\n\t\t\tisMultiplaying: multiplayer,\n\t\t\thandleMultiplaying: handleMultiplayer,\n\t\t\tdoMultiplaying: handleMultiplaying,\n\t\t},\n\t\tboard: {\n\t\t\tgameBoard: board,\n\t\t\thandleGameBoard: dispatchBoard,\n\t\t},\n\t\tanimateGameBoard: {\n\t\t\tanimateBoard,\n\t\t\thandleAnimateBoard: dispatchAnimateBoard,\n\t\t},\n\t\twinner: {\n\t\t\tisWinner: winner,\n\t\t\thandleWinner: setWinner,\n\t\t},\n\t\ttie: {\n\t\t\tisTie: tie,\n\t\t\thandleTie: setTie,\n\t\t\tcheckIsTie,\n\t\t},\n\t\tturn: {\n\t\t\tactiveTurn: turn,\n\t\t\thandleActiveTurn: handleTurn,\n\t\t},\n\t\trestart: handleRestart,\n\t\tonMove: handleMove,\n\t};\n\n\treturn <Game {...boardProps} />;\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}